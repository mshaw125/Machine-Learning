import numpy as np
import numpy.linalg as nlg

#creates the polynomial we are working with
def Poly (x, degree):
    #making a column of ones
    p = np.ones(len(x))
    p = np.column_stack([p, x])
    
    #adding the polynomial
    for i in xrange(2, degree+1):
        p = np.column_stack([p, np.power(x, i)])
        
    return p
   
#predicts the output based on the normal equation and returns it with the MSE
def predictor (X, Y, theta, degree):
    p = Poly(X, degree)
    
    predict = p.dot(theta)
    e = Y - predict
    MSE = np.mean(e**2)
    
    return predict, MSE

#finds and returns the theta with the smallest MSE
def polyfit (X, Y, degree):
    p = Poly(X, degree)
    
    theta = nlg.inv(np.dot(p.T, p)).dot(p.T).dot(Y)
    
    MSE = predictor(X, Y, theta, degree)[1]
    
    return theta, MSE

#cross validates training and testing data, returning mean MSE
def cross_val (k, data, degree):
    n = len(data)
    MSE = []
    
    for i in xrange(k):
        start = (n*i)/k
        end = (n*(i+1))/k
        
        val = data[start:end]
        train = np.vstack([data[0:start], data[end:n]])
        
        theta = polyfit(train[:, 0], train[:, 1], degree)[0]
        mse = predictor(val[:, 0], val[:, 1], theta, degree)[1]
        
        MSE.append(mse)
        
    return np.mean(MSE)
    
#finds the best degree polynomial to fit based on MSE
MSE = []
for degree in xrange (1, 16):
    mse = cross_val(2, train, degree)
    MSE.append(mse)
print "The best choice of degree is:", MSE.index(min(MSE))+1
print "MSE:", min(MSE)
